data class Subscription(
    val userId: Long,
    val status: Status,
    val expiresAt: LocalDateTime
) {
    enum class Status {
        ACTIVE, CANCELED, EXPIRED
    }
}

interface Specification<T> {
    fun isSatisfiedBy(candidate: T): Boolean

    fun and(other: Specification<T>): Specification<T> =
        AndSpecification(this, other)

    fun or(other: Specification<T>): Specification<T> =
        OrSpecification(this, other)

    fun not(): Specification<T> = NotSpecification(this)
}

class IsActiveSpec : Specification<Subscription> {
    override fun isSatisfiedBy(candidate: Subscription): Boolean {
        return candidate.status == Subscription.Status.ACTIVE
    }
}

class IsExpiringSoonSpec(
    private val now: LocalDateTime = LocalDateTime.now()
) : Specification<Subscription> {
    override fun isSatisfiedBy(candidate: Subscription): Boolean {
        val remainingDays = Duration.between(now, candidate.expiresAt).toDays()
        return remainingDays in 0..3
    }
}



class IsExpiringSoonSpec(
    private val now: LocalDateTime = LocalDateTime.now()
) : Specification<Subscription> {
    override fun isSatisfiedBy(candidate: Subscription): Boolean {
        val remainingDays = Duration.between(now, candidate.expiresAt).toDays()
        return remainingDays in 0..3
    }
}





















































































































































